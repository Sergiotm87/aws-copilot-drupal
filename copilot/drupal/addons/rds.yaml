Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: The name of the service, job, or workflow being deployed.

Resources:
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      AllocatedStorage: '20'
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true      
      BackupRetentionPeriod: 0
      CopyTagsToSnapshot: true
      DBInstanceClass: 'db.t2.micro'
      DBName: 'copilotdrupal'
      DBSubnetGroupName: !Ref DBSubnetGroup
      MasterUsername: drupal
      MasterUserPassword: password
      Engine: mysql
      EngineVersion: '5.7'
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref ClusterSecurityGroup

  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref AWS::StackName
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: { 'Fn::ImportValue': !Sub '${App}-${Env}-EnvironmentSecurityGroup' }
          Description: 'Access to environment security group'
      VpcId: { 'Fn::ImportValue': !Sub '${App}-${Env}-VpcId' }

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Ref AWS::StackName
      SubnetIds: !Split [ ',', { 'Fn::ImportValue': !Sub '${App}-${Env}-PrivateSubnets' } ]

Outputs:
  # 1. If you want to inject a property of your resource as an environment variable to your ECS task,
  # then you need to define an output for it.
  # For example, the output RdsEndpoint will be injected in capital snake case, RDS_ENDPOINT, to your task.
  MysqlHost:
    Description: The connection endpoint for the DB cluster.
    Value: 
      Fn::GetAtt: 
        [RDSInstance, Endpoint.Address]